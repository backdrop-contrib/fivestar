<?php

/**
 * @file
 * Installation file for fivestar module.
 */

function fivestar_schema() {
  return array();
}

function fivestar_install() {

}

function fivestar_uninstall() {
  db_query("DELETE FROM {variable} WHERE name LIKE 'fivestar_%'");
}

/**
 * Implementation of hook_enable().
 */
function fivestar_enable() {

}

/**
 * Implementation of hook_disable().
 */
function fivestar_disable() {

}

/**
 * Function to retrieve the current version to prevent duplicate updates.
 */
function fivestar_update_version() {
  static $version;

  if (!isset($version)) {
    $version = db_result(db_query("SELECT schema_version FROM {system} WHERE type = 'module' AND name = 'fivestar'"));
  }

  return $version;
}

/**
 * Add the fivestar comment tables.
 */
function fivestar_update_1() {
  // No longer needed. The tables are added by fivestar_commment_install().
  return array();
}

/**
 * Convert previous fivestar widget settings to new format.
 */
function fivestar_update_2() {
  $types = node_get_types('names');
  foreach ($types as $key => $name) {
    $style = variable_get('fivestar_style_'. $key, 'default');
    $enabled = variable_get('fivestar_'. $key, FALSE);
    // Split the display style into two variables for stars and text.
    if ($enabled) {
      switch ($style) {
        case 'default':
          variable_set('fivestar_style_'. $key, 'user');
          variable_set('fivestar_text_'. $key, 'average');
          break;
        case 'compact':
          variable_set('fivestar_style_'. $key, 'user');
          variable_set('fivestar_text_'. $key, 'none');
          break;
        case 'dual':
          variable_set('fivestar_text_'. $key, 'none');
          break;
      }
    }
    // We no longer save any settings if Fivestar is disabled.
    else {
      variable_del('fivestar_unvote_'. $key);
      variable_del('fivestar_style_'. $key);
      variable_del('fivestar_position_'. $key);
      variable_del('fivestar_position_teaser_'. $key);
    }
  }
  return array();
}

/**
 * Upgrade to Drupal 6 and VotingAPI 2.
 *
 * Remove anonymous vote interval from Fivestar, now handled by VotingAPI.
 */
function fivestar_update_6100() {
  // If using CCK, make sure it has updated first.
  if (function_exists('content_check_update') && ($abort = content_check_update('fivestar'))) {
    return $abort;
  }
  
  $ret = array();
  variable_del('fivestar_anonymous_vote_interval');
  $ret[] = array('success' => TRUE, 'query' => "variable_del('fivestar_anonymous_vote_interval')");
  return $ret;
}

/**
 * Add vote_id column to the fivestar_comment table.
 */
function fivestar_update_6101() {
  // Moved to fivestar_commment_update_6100().
  return array();
}

/**
 * Set Fivestar weight to -1 so that it can load before content.module.
 */
function fivestar_update_6102() {
  $ret = array();

  // This update will already be run as fivestar_update_5701 on Drupal 5.
  if (fivestar_update_version() >= 6100) {
    $ret[] = update_sql("UPDATE {system} SET weight = -1 WHERE type = 'module' AND name = 'fivestar'");
  }
  return $ret;
}

/**
 * Move comment support to a separate module.
 */
function fivestar_update_6103() {
  // Comment support was added in schema version 1.
  if (fivestar_update_version() >= 6100) {
    // Enable the module, but don't run the install hook (tables already exist).
    if (module_exists('comment')) {
      module_rebuild_cache();
      module_enable(array('fivestar_comment'));
      $version = array_pop(drupal_get_schema_versions('fivestar_comment'));
      drupal_set_installed_schema_version('fivestar_comment', $version);
      module_rebuild_cache();
    }
    // If the comment table needs an update, run fivestar_comment_update_5100().
    if (fivestar_update_version() < 6101) {
      module_load_install('fivestar_comment');
      fivestar_comment_update_6100();
    }
  }
  return array();
}

/**
 * Update CCK target logic to rename "target" to "php_target".
 */
function fivestar_update_6104() {
  // Previously ran as fivestar_update_5703 on Drupal 5.
  // Also, don't run this update if CCK is not enabled.
  if (fivestar_update_version() >= 6100 && module_exists('content')) {
    $result = db_query("SELECT field_name, global_settings FROM {content_node_field} WHERE type = 'fivestar'");
    while ($field = db_fetch_object($result)) {
      $settings = unserialize($field->global_settings);
      if (!empty($settings['target'])) {
        if (is_numeric($settings['target'])) {
          // If previously a straight integer, just add a "return" to the number.
          $settings['php_target'] = 'return '. $settings['target'];
        }
        else {
          // If already PHP code, remove the PHP brackets.
          $php = trim($settings['target']);
          $php = preg_replace('/^<\?(php)?/', '', $php);
          $php = preg_replace('/\?>$/', '', $php);
          $settings['php_target'] = $php;
        }
      }
      unset($settings['target']);
      unset($settings['php']);
      db_query("UPDATE {content_node_field} SET global_settings = '%s' WHERE field_name = '%s'", serialize($settings), $field->field_name);
    }
  }
  return array();
}

/**
 * Belated update for Drupal 6: Re-enable Fivestar CCK fields.
 */
function fivestar_update_6105() {
  $ret = array();

  if (!module_exists('content')) {
    $ret[] = array('success' => TRUE, 'query' => t('CCK is not installed. No update ran.'));
    return $ret;
  }

  if ($abort = content_check_update('fivestar')) {
    return $abort;
  }

  // All CCK fields are disabled by Content module during the D6 upgrade.
  // Re-enable the Fivestar fields.
  module_load_include('inc', 'fivestar', 'includes/fivestar.field');
  content_associate_fields('fivestar');

  $ret[] = array('success' => TRUE, 'query' => t('Re-enabled Fivestar CCK fields.'));

  return $ret;
}


function fivestar_field_schema() {
  return array(
    'columns' => array(
      'rating' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'sortable' => TRUE
      ),
      'target' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE
      ),
    ),
  );
}

/**
 * Fixes the axis value stored for fivestar fields
 */
function fivestar_update_7201() {
  $fields = field_read_fields(array('module' => 'fivestar'));
  $tags_numeric = array_values(fivestar_get_tags());
  
  foreach($fields as $field) {
    if (is_numeric($field['settings']['axis'])) {
      $field['settings']['axis'] = $tags_numeric[$field['settings']['axis']];
    }
  }
}

/**
 * Moves the field settings to field instance settings
 */
function fivestar_update_7202() {
  $fields = field_read_fields(array('module' => 'fivestar'));

  foreach($fields as $field) {
    $instances = field_read_instances(array('field_name' => $field['field_name']));
    foreach($instances as $instance) {
      $instance['settings'] = $field['settings'];
      field_update_instance($instance);
    }
  }
}

  
/**
 * Convert all existing fivestar/node_type settings into fields with exposed fivestar formatters
 */
function fivestar_update_7203() {
  // Gather the node types
  $query = db_select('node_type', 'n');
  $query->addField('n', 'type');
  $result = $query->execute();
  $types = $result->fetchCol();

  // Gather the tags.  In the case that fivestar_get_tags() is ever removed from
  // the module, this update still needs to run.
  $tags_txt = variable_get('fivestar_tags', 'vote');
  $tags_exploded = explode(',', $tags_txt);

  $tags = array();
  $got_vote = false;
  foreach ($tags_exploded as $tag) {
    $tag_trimmed = trim($tag);
    if ($tag_trimmed) {
      $tags[] = $tag_trimmed;
      if ($tag_trimmed == 'vote') {
        $got_vote = true;
      }
    }
  }

  if (!$got_vote) {
    $tags[] = 'vote';
  }
  $tags;

  foreach($tags as $tag) {
    $suffix = '';
    foreach($types as $type) {
      $var_suffix = $type . ($tag == 'vote' ? '' : '_' . $tag);

      $settings = array(
        'stars' => variable_get('fivestar_stars_' . $var_suffix, 6),
        'allow_clear' => variable_get('fivestar_unvote_' . $var_suffix, 0),
        'feedback_enable' => variable_get('fivestar_feedback_'. $var_suffix, 1),
        'style' => variable_get('fivestar_style_' . $var_suffix, 'average'),
        'text' => variable_get('fivestar_text_' . $var_suffix, 'dual'),
      );

      if (variable_get('fivestar_' . $var_suffix, FALSE)) {
        // Check to see if a field for this tag exists and create one if needed
        $field_name = 'field_' . $tag;
        $field = field_read_field($field_name . $suffix, array('include_deleted' => TRUE));

        $i = 0;
        while(!empty($field) && $field['type'] != 'fivestar') {
          $suffix = '_' . $i;
          $field = field_read_field($field_name . $suffix, array('include_deleted' => TRUE));
          $i++;
        }
        if (empty($field)) {
          $field_values = array(
            'field_name' => $field_name . $suffix,
            'type' => 'fivestar',
            'settings' => array(
              'axis' => $tag,
            ),
          );
          $field = field_create_field($field_values);
        }
        
        // Create an instance of the field in this bundle
        $instance = field_read_instance('node', $field['field_name'], $type, array('include_deleted' => TRUE));
        if (empty($instance)) {
          $settings['allow_clear'] = $settings['unvote_enable'];
          $settings['style'] = $settings['star_display'];
          $settings['text'] = $settings['text_display'];

          $instance_info = array(
            'field_name' => $field['field_name'],
            'entity_type' => 'node',
            'bundle' => $type,
            'widget' => array(
              'type' => 'stars',
            ),
            'display' => array(
              'default' => array(
                'type' => 'fivestar_formatter_exposed_stars',
                'settings' => $settings,
              ),
            ),
            'settings' => array(
              'stars' => $settings['stars'],
              'target' => 'self',
            ),
          );

          if (variable_get('fivestar_position_teaser_' . $var_suffix, 'hidden') != 'hidden') {
            $instance_info['display']['teaser'] = array(
              'type' => 'fivestar_formatter_exposed_stars',
              'settings' => $settings,
            );
          }
          
          field_create_instance($instance_info);
        }
      }
    }
  }
  
  // Rebuild the menu to remove the node type tag form paths
  menu_rebuild();
  _field_info_collate_fields(TRUE);
}
